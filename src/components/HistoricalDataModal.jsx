import React, { useState, useEffect } from 'react';
import { 
  getCurrentWeek, 
  getPreviousWeek, 
  getWeeksInRange, 
  formatDateString, 
  formatDisplayDate, 
  getWeekNumber 
} from '../../utils/dateUtils.js';

const HistoricalDataModal = ({ isOpen, onClose, user }) => {
  const [historicalWeeks, setHistoricalWeeks] = useState([]);
  const [selectedWeek, setSelectedWeek] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Load historical data when modal opens
  useEffect(() => {
    if (isOpen && user) {
      loadHistoricalData();
    }
  }, [isOpen, user]);

  const loadHistoricalData = () => {
    setLoading(true);
    setError('');

    try {
      // Get last 12 weeks of data
      const currentWeek = getCurrentWeek();
      const startDate = new Date(currentWeek.start);
      startDate.setDate(startDate.getDate() - (12 * 7)); // 12 weeks ago

      const weeks = getWeeksInRange(startDate, currentWeek.end);
      
      // Load meal plan data from localStorage for each week
      const weekData = weeks.map(week => {
        const weekKey = `mealPlan_${user}_${formatDateString(week.start)}`;
        const storedData = localStorage.getItem(weekKey);
        
        return {
          ...week,
          weekNumber: getWeekNumber(week.start),
          year: week.start.getFullYear(),
          dateRange: `${formatDisplayDate(week.start)} - ${formatDisplayDate(week.end)}`,
          hasMealPlan: !!storedData,
          mealPlanData: storedData ? JSON.parse(storedData) : null,
          mealCount: storedData ? countMealsInPlan(JSON.parse(storedData)) : 0
        };
      }).reverse(); // Most recent first

      setHistoricalWeeks(weekData);
    } catch (err) {
      setError('Failed to load historical data');
      console.error('Error loading historical data:', err);
    } finally {
      setLoading(false);
    }
  };

  const countMealsInPlan = (mealPlan) => {
    if (!mealPlan) return 0;
    
    let count = 0;
    Object.values(mealPlan).forEach(dayData => {
      if (dayData && dayData.meals) {
        Object.values(dayData.meals).forEach(meal => {
          if (meal) count++;
        });
      }
    });
    return count;
  };

  const getWeekGroceryList = (mealPlan) => {
    if (!mealPlan) return [];
    
    const ingredients = [];
    Object.values(mealPlan).forEach(dayData => {
      if (dayData && dayData.meals) {
        Object.values(dayData.meals).forEach(meal => {
          if (meal && meal.ingredients) {
            ingredients.push(...meal.ingredients);
          }
        });
      }
    });

    // Combine duplicates
    const ingredientCount = {};
    ingredients.forEach(item => {
      const key = item.trim().toLowerCase();
      ingredientCount[key] = (ingredientCount[key] || 0) + 1;
    });

    return Object.keys(ingredientCount).map(key => {
      const count = ingredientCount[key];
      const name = key.charAt(0).toUpperCase() + key.slice(1);
      return count > 1 ? `${name} x${count}` : name;
    });
  };

  const downloadWeeklyGroceryList = (week) => {
    const groceryList = getWeekGroceryList(week.mealPlanData);
    
    const content = `Historical Grocery List - Week ${week.weekNumber}, ${week.year}
Generated for: ${user}
Week: ${week.dateRange}
Downloaded: ${new Date().toLocaleDateString()}

${groceryList.map(item => `‚Ä¢ ${item}`).join('\n')}

Total items: ${groceryList.length}
Meals planned: ${week.mealCount}

Generated by Meal Planner App`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `grocery-list-week-${week.weekNumber}-${week.year}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const downloadWeeklyMealPlan = (week) => {
    if (!week.mealPlanData) return;

    let content = `Meal Plan - Week ${week.weekNumber}, ${week.year}
Generated for: ${user}
Week: ${week.dateRange}
Downloaded: ${new Date().toLocaleDateString()}

`;

    Object.entries(week.mealPlanData).forEach(([dateKey, dayData]) => {
      if (dayData && dayData.meals) {
        content += `\nüìÖ ${dayData.displayDate || dateKey}:\n`;
        
        ['Breakfast', 'Lunch', 'Dinner'].forEach(mealType => {
          const meal = dayData.meals[mealType];
          if (meal) {
            content += `  üçΩÔ∏è ${mealType}: ${meal.title}\n`;
            if (meal.nutrition) {
              content += `     Nutrition: ${meal.nutrition.calories} cal, ${meal.nutrition.protein}g protein\n`;
            }
          } else {
            content += `  üçΩÔ∏è ${mealType}: (no meal planned)\n`;
          }
        });
      }
    });

    content += `\nTotal meals planned: ${week.mealCount}\n\nGenerated by Meal Planner App`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `meal-plan-week-${week.weekNumber}-${week.year}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!isOpen) return null;

  return (
    <div className="delete-modal">
      <div className="delete-content" style={{ maxWidth: '700px', maxHeight: '80vh' }}>
        <div style={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          marginBottom: '1.5rem',
          paddingBottom: '1rem',
          borderBottom: '2px solid #eee'
        }}>
          <div>
            <h3 style={{ margin: '0 0 0.5rem 0' }}>üìä Historical Meal Plans</h3>
            <p style={{ margin: 0, color: '#666' }}>Hi {user}! Here are your past meal plans and grocery lists.</p>
          </div>
          <button 
            onClick={onClose}
            style={{
              background: 'none',
              border: 'none',
              fontSize: '1.5rem',
              cursor: 'pointer',
              padding: '0.5rem'
            }}
          >
            ‚úï
          </button>
        </div>

        {loading && (
          <div style={{ textAlign: 'center', padding: '2rem' }}>
            <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>‚è≥</div>
            <p>Loading historical data...</p>
          </div>
        )}

        {error && (
          <div style={{ 
            background: '#fff3f3', 
            border: '2px solid #ff6b6b', 
            borderRadius: '0.5rem',
            padding: '1rem',
            margin: '1rem 0',
            color: '#d32f2f'
          }}>
            <strong>‚ùå Error:</strong> {error}
          </div>
        )}

        {!loading && !error && (
          <div style={{ maxHeight: '500px', overflowY: 'auto' }}>
            {historicalWeeks.length === 0 ? (
              <div style={{ textAlign: 'center', padding: '3rem', color: '#666' }}>
                <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üì≠</div>
                <h4>No Historical Data Found</h4>
                <p>Start planning meals to see your history here!</p>
              </div>
            ) : (
              <div style={{ display: 'grid', gap: '1rem' }}>
                {historicalWeeks.map(week => (
                  <div key={`${week.year}-${week.weekNumber}`} style={{
                    border: '2px solid #ddd',
                    borderRadius: '0.5rem',
                    padding: '1rem',
                    background: week.hasMealPlan ? '#f0f8ff' : '#f9f9f9',
                    borderColor: week.hasMealPlan ? '#4a90e2' : '#ddd'
                  }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                      <div style={{ flex: 1 }}>
                        <h4 style={{ margin: '0 0 0.5rem 0', color: week.hasMealPlan ? '#4a90e2' : '#666' }}>
                          üìÖ Week {week.weekNumber}, {week.year}
                        </h4>
                        <p style={{ margin: '0 0 0.5rem 0', fontSize: '0.9rem', color: '#666' }}>
                          {week.dateRange}
                        </p>
                        
                        {week.hasMealPlan ? (
                          <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
                            <span style={{ 
                              background: '#e8f5e8', 
                              color: '#2d7d32', 
                              padding: '0.25rem 0.75rem',
                              borderRadius: '1rem',
                              fontSize: '0.8rem',
                              fontWeight: 'bold'
                            }}>
                              ‚úÖ {week.mealCount} meals planned
                            </span>
                          </div>
                        ) : (
                          <span style={{ 
                            background: '#fff3e0', 
                            color: '#f57c00', 
                            padding: '0.25rem 0.75rem',
                            borderRadius: '1rem',
                            fontSize: '0.8rem'
                          }}>
                            üìù No meal plan
                          </span>
                        )}
                      </div>

                      {week.hasMealPlan && (
                        <div style={{ display: 'flex', gap: '0.5rem', flexShrink: 0 }}>
                          <button
                            className="filter-btn"
                            onClick={() => downloadWeeklyMealPlan(week)}
                            style={{
                              background: '#4a90e2',
                              color: 'white',
                              border: '2px solid #4a90e2',
                              fontSize: '0.8rem',
                              padding: '0.4rem 0.8rem'
                            }}
                            title="Download meal plan"
                          >
                            üìÑ Meals
                          </button>
                          <button
                            className="filter-btn"
                            onClick={() => downloadWeeklyGroceryList(week)}
                            style={{
                              background: '#66bb6a',
                              color: 'white',
                              border: '2px solid #66bb6a',
                              fontSize: '0.8rem',
                              padding: '0.4rem 0.8rem'
                            }}
                            title="Download grocery list"
                          >
                            üõí Groceries
                          </button>
                        </div>
                      )}
                    </div>

                    {selectedWeek === week.weekNumber && week.mealPlanData && (
                      <div style={{ 
                        marginTop: '1rem', 
                        padding: '1rem',
                        background: 'white',
                        borderRadius: '0.25rem',
                        border: '1px solid #ddd'
                      }}>
                        <h5 style={{ margin: '0 0 1rem 0' }}>Meal Details:</h5>
                        {Object.entries(week.mealPlanData).map(([dateKey, dayData]) => {
                          if (!dayData || !dayData.meals) return null;
                          
                          const dayMeals = Object.entries(dayData.meals).filter(([_, meal]) => meal);
                          if (dayMeals.length === 0) return null;

                          return (
                            <div key={dateKey} style={{ marginBottom: '1rem' }}>
                              <strong>{dayData.displayDate || dateKey}:</strong>
                              <div style={{ marginLeft: '1rem', marginTop: '0.5rem' }}>
                                {dayMeals.map(([mealType, meal]) => (
                                  <div key={mealType} style={{ marginBottom: '0.25rem' }}>
                                    <span style={{ fontWeight: 'bold' }}>{mealType}:</span> {meal.title}
                                    {meal.nutrition && (
                                      <span style={{ color: '#666', fontSize: '0.8rem', marginLeft: '0.5rem' }}>
                                        ({meal.nutrition.calories} cal)
                                      </span>
                                    )}
                                  </div>
                                ))}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    )}

                    {week.hasMealPlan && (
                      <button
                        onClick={() => setSelectedWeek(selectedWeek === week.weekNumber ? null : week.weekNumber)}
                        style={{
                          background: 'none',
                          border: 'none',
                          color: '#4a90e2',
                          cursor: 'pointer',
                          fontSize: '0.9rem',
                          marginTop: '0.5rem',
                          textDecoration: 'underline'
                        }}
                      >
                        {selectedWeek === week.weekNumber ? 'üîº Hide details' : 'üîΩ View details'}
                      </button>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        <div style={{ 
          display: 'flex', 
          justifyContent: 'center',
          borderTop: '1px solid #eee',
          paddingTop: '1rem',
          marginTop: '1.5rem'
        }}>
          <button 
            className="filter-btn" 
            onClick={onClose}
            style={{
              background: '#f5f5f5',
              color: '#666',
              border: '2px solid #ddd'
            }}
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

export default HistoricalDataModal;